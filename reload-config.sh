#!/bin/bash

# Script de rechargement des configurations DoriaV2
# Permet de recharger les configurations modifi√©es sans red√©marrer les conteneurs
# Usage: ./reload-config.sh [asterisk|mysql|web|test|all|help]

set -euo pipefail  # Mode strict pour une meilleure gestion d'erreurs

# Configuration
readonly SCRIPT_NAME=$(basename "$0")
readonly ASTERISK_CONTAINER="doriav2-asterisk"
readonly MYSQL_CONTAINER="doriav2-mysql"
readonly WEB_CONTAINER="doriav2-web"

# Couleurs pour l'affichage
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m'

# Fonction utilitaire pour les messages
log_info() { echo -e "${BLUE}${1}${NC}"; }
log_success() { echo -e "${GREEN}‚úÖ ${1}${NC}"; }
log_warning() { echo -e "${YELLOW}‚ö†Ô∏è  ${1}${NC}"; }
log_error() { echo -e "${RED}‚ùå ${1}${NC}"; }

# V√©rification des pr√©requis
check_prerequisites() {
    if ! command -v docker &> /dev/null; then
        log_error "Docker n'est pas install√© ou n'est pas dans le PATH"
        exit 1
    fi
    
    if ! docker ps --format "table {{.Names}}" | grep -q "$ASTERISK_CONTAINER"; then
        log_error "Le conteneur $ASTERISK_CONTAINER n'est pas en cours d'ex√©cution"
        exit 1
    fi
}

echo "üîÑ RECHARGEMENT DES CONFIGURATIONS DORIAV2"
echo "==========================================="

# Fonction pour ex√©cuter une commande Asterisk
execute_asterisk_command() {
    local command="$1"
    local description="$2"
    
    if docker exec "$ASTERISK_CONTAINER" asterisk -rx "$command" &> /dev/null; then
        log_success "$description"
        return 0
    else
        log_error "Erreur lors de l'ex√©cution : $command"
        return 1
    fi
}

reload_asterisk_config() {
    log_info "\nüìû Rechargement configuration Asterisk..."
    
    local commands=(
        "dialplan reload:Dialplan recharg√©"
        "pjsip reload:Configuration PJSIP recharg√©e"
        "rtp reload:Configuration RTP recharg√©e"
        "module reload:Modules recharg√©s"
    )
    
    for cmd_desc in "${commands[@]}"; do
        local cmd="${cmd_desc%%:*}"
        local desc="${cmd_desc##*:}"
        
        if ! execute_asterisk_command "$cmd" "$desc"; then
            case "$cmd" in
                "rtp reload"|"module reload")
                    log_warning "$desc (peut n√©cessiter un red√©marrage)"
                    ;;
                *)
                    log_error "√âchec du rechargement : $desc"
                    ;;
            esac
        fi
    done
}

reload_mysql_config() {
    log_info "\nüóÑÔ∏è  Rechargement configuration MySQL..."
    
    log_warning "MySQL n√©cessite un red√©marrage pour prendre en compte les changements de configuration"
    log_info "   Pour red√©marrer MySQL: docker compose restart mysql"
}

reload_web_config() {
    log_info "\nüåê Rechargement configuration Web..."
    
    if docker exec "$WEB_CONTAINER" apache2ctl graceful &> /dev/null; then
        log_success "Configuration Apache recharg√©e"
    else
        log_warning "Apache graceful reload non disponible, red√©marrage recommand√©"
        log_info "   Pour red√©marrer Apache: docker compose restart web"
    fi
}

test_configurations() {
    log_info "\nüß™ Test des configurations..."
    
    # Test syntaxe Asterisk dialplan
    echo "   Test syntaxe dialplan..."
    local dialplan_errors
    dialplan_errors=$(docker exec "$ASTERISK_CONTAINER" asterisk -rx "dialplan show" 2>&1 | grep -i "error\|warning" | head -3 || true)
    
    if [[ -z "$dialplan_errors" ]]; then
        echo -e "   ${GREEN}‚úÖ Syntaxe dialplan correcte${NC}"
    else
        echo -e "   ${RED}‚ùå Erreurs d√©tect√©es dans le dialplan:${NC}"
        while IFS= read -r line; do
            echo -e "      ${RED}$line${NC}"
        done <<< "$dialplan_errors"
    fi
    
    # Test endpoints PJSIP
    echo "   Test endpoints PJSIP..."
    local endpoints_count=0
    
    if docker exec "$ASTERISK_CONTAINER" asterisk -rx "pjsip show endpoints" &>/dev/null; then
        local pjsip_output
        pjsip_output=$(docker exec "$ASTERISK_CONTAINER" asterisk -rx "pjsip show endpoints" 2>/dev/null)
        endpoints_count=$(echo "$pjsip_output" | grep -c "100[1-4]" 2>/dev/null || echo "0")
    fi
    
    # Nettoyer le r√©sultat pour s'assurer qu'il s'agit d'un nombre
    endpoints_count=$(echo "$endpoints_count" | tr -d '\n\r ' | grep -o '[0-9]*' | head -1)
    endpoints_count=${endpoints_count:-0}
    
    if [[ $endpoints_count -ge 4 ]]; then
        echo -e "   ${GREEN}‚úÖ Endpoints PJSIP configur√©s (${endpoints_count}/4)${NC}"
    elif [[ $endpoints_count -gt 0 ]]; then
        echo -e "   ${YELLOW}‚ö†Ô∏è  Seulement ${endpoints_count}/4 endpoints d√©tect√©s${NC}"
    else
        echo -e "   ${YELLOW}‚ö†Ô∏è  Aucun endpoint PJSIP d√©tect√© (PJSIP peut ne pas √™tre configur√©)${NC}"
    fi
}

show_help() {
    cat << EOF
Usage: $SCRIPT_NAME [OPTION]

DESCRIPTION:
    Script de rechargement des configurations DoriaV2 sans red√©marrage de conteneurs.

OPTIONS:
    asterisk, ast     Recharger uniquement la configuration Asterisk
    mysql, db         Afficher les instructions pour MySQL
    web, apache       Recharger uniquement la configuration Apache
    test             Tester la validit√© des configurations
    all              Recharger toutes les configurations (d√©faut)
    help, -h, --help Afficher cette aide

COMMANDES MANUELLES:
    Asterisk (dans le conteneur):
      dialplan reload     Recharger extensions.conf
      pjsip reload        Recharger pjsip.conf
      rtp reload          Recharger rtp.conf
      module reload       Recharger tous les modules
      core reload         Rechargement g√©n√©ral

    Apache:
      docker exec $WEB_CONTAINER apache2ctl graceful

    Services (n√©cessitent red√©marrage):
      docker compose restart mysql
      docker compose restart redis

EXEMPLES:
    $SCRIPT_NAME                 # Rechargement complet
    $SCRIPT_NAME asterisk        # Asterisk uniquement
    $SCRIPT_NAME test            # Tests uniquement

EOF
}

show_completion_message() {
    echo ""
    log_success "üéâ Rechargement termin√© !"
    echo ""
    log_info "üí° Utilisation:"
    echo "   Modifiez les fichiers de configuration et relancez ce script pour"
    echo "   appliquer les changements sans red√©marrer les conteneurs."
    echo ""
    log_info "üìã Fichiers de configuration mont√©s:"
    echo "   ‚Ä¢ ./asterisk/config/*.conf  ‚Üí /etc/asterisk/"
    echo "   ‚Ä¢ ./mysql/my.cnf            ‚Üí /etc/mysql/conf.d/"
    echo "   ‚Ä¢ ./src/                    ‚Üí /var/www/html/"
    echo ""
    log_info "üîç Outils suppl√©mentaires:"
    echo "   ‚Ä¢ Monitoring: ./debug-audio.sh"
    echo "   ‚Ä¢ Tests: ./test-stack.sh"
    echo "   ‚Ä¢ Tests volumes: ./test-volumes.sh"
    echo ""
}

# Fonction principale
main() {
    check_prerequisites
    
    case "${1:-all}" in
        "asterisk"|"ast")
            reload_asterisk_config
            test_configurations
            ;;
        "mysql"|"db")
            reload_mysql_config
            ;;
        "web"|"apache")
            reload_web_config
            ;;
        "test")
            test_configurations
            ;;
        "help"|"-h"|"--help")
            show_help
            exit 0
            ;;
        "all"|*)
            reload_asterisk_config
            reload_mysql_config
            reload_web_config
            test_configurations
            ;;
    esac
    
    show_completion_message
}

# Point d'entr√©e du script
main "$@"
